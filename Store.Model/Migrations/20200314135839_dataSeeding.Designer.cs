// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreEFtest.Model;

namespace StoreEFtest.Model.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20200314135839_dataSeeding")]
    partial class dataSeeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StoreEFtest.Model.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("brand_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnName("brand_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("brands","production");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "brand 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "brand 2"
                        });
                });

            modelBuilder.Entity("StoreEFtest.Model.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("category_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnName("category_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("categories","production");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "cat 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "cat 2"
                        });
                });

            modelBuilder.Entity("StoreEFtest.Model.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("customer_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnName("zip_code")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("customers","sales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "kh",
                            Email = "bla@bla.com",
                            FirstName = "Bob",
                            LastName = "Blob",
                            Phone = "0572",
                            State = "KhObl",
                            Street = "Nauki 43a",
                            ZipCode = "61111"
                        },
                        new
                        {
                            Id = 2,
                            City = "khar",
                            Email = "blabla@bla.com",
                            FirstName = "Bobik",
                            LastName = "Blobik",
                            Phone = "057",
                            State = "KhO",
                            Street = "Nauki 43b",
                            ZipCode = "61111"
                        });
                });

            modelBuilder.Entity("StoreEFtest.Model.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnName("order_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnName("order_status")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequiredDate")
                        .HasColumnName("required_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShippedDate")
                        .HasColumnName("shipped_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("StaffId")
                        .HasColumnName("staff_id")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StaffId");

                    b.HasIndex("StoreId");

                    b.ToTable("orders","sales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            OrderDate = new DateTime(2020, 3, 14, 0, 0, 0, 0, DateTimeKind.Local),
                            OrderStatus = 0,
                            RequiredDate = new DateTime(2020, 3, 16, 0, 0, 0, 0, DateTimeKind.Local),
                            ShippedDate = new DateTime(2020, 3, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            StaffId = 2,
                            StoreId = 1
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 1,
                            OrderDate = new DateTime(2020, 3, 14, 0, 0, 0, 0, DateTimeKind.Local),
                            OrderStatus = 1,
                            RequiredDate = new DateTime(2020, 3, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            ShippedDate = new DateTime(2020, 3, 14, 0, 0, 0, 0, DateTimeKind.Local),
                            StaffId = 1,
                            StoreId = 1
                        });
                });

            modelBuilder.Entity("StoreEFtest.Model.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnName("order_id")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnName("list_price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_items","sales");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            ProductId = 1,
                            Discount = 20m,
                            Price = 100m,
                            Quantity = 7
                        },
                        new
                        {
                            OrderId = 2,
                            ProductId = 2,
                            Discount = 30m,
                            Price = 200m,
                            Quantity = 17
                        });
                });

            modelBuilder.Entity("StoreEFtest.Model.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("product_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnName("brand_id")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModelYear")
                        .HasColumnName("model_year")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnName("product_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnName("list_price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("products","production");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            ModelYear = new DateTime(1982, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "product 1",
                            ProductPrice = 1000000m
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 2,
                            CategoryId = 2,
                            ModelYear = new DateTime(2017, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "product 2",
                            ProductPrice = 1000000000m
                        });
                });

            modelBuilder.Entity("StoreEFtest.Model.Entities.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("staff_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnName("active")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManagerId")
                        .HasColumnName("manager_id")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("staffs","sales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "walk@com",
                            FirstName = "Walk",
                            IsActive = true,
                            LastName = "Walker",
                            Phone = "555",
                            StoreId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "megan@com",
                            FirstName = "Megan",
                            IsActive = true,
                            LastName = "Fox",
                            ManagerId = 1,
                            Phone = "777",
                            StoreId = 1
                        });
                });

            modelBuilder.Entity("StoreEFtest.Model.Entities.Stock", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnName("store_name")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_name")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int");

                    b.HasKey("StoreId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("stocks","production");

                    b.HasData(
                        new
                        {
                            StoreId = 1,
                            ProductId = 1,
                            Quantity = 300
                        },
                        new
                        {
                            StoreId = 1,
                            ProductId = 2,
                            Quantity = 200
                        });
                });

            modelBuilder.Entity("StoreEFtest.Model.Entities.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("store_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnName("store_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnName("zip_codee")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("stores","sales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "bla city",
                            Email = "store@mail.com",
                            Name = "The Store",
                            Phone = "057",
                            State = "KH",
                            Street = "bla bla street",
                            ZipCode = "61"
                        });
                });

            modelBuilder.Entity("StoreEFtest.Model.Entities.Order", b =>
                {
                    b.HasOne("StoreEFtest.Model.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreEFtest.Model.Entities.Staff", "Staff")
                        .WithMany("Orders")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreEFtest.Model.Entities.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("StoreEFtest.Model.Entities.OrderItem", b =>
                {
                    b.HasOne("StoreEFtest.Model.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreEFtest.Model.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StoreEFtest.Model.Entities.Product", b =>
                {
                    b.HasOne("StoreEFtest.Model.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreEFtest.Model.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StoreEFtest.Model.Entities.Staff", b =>
                {
                    b.HasOne("StoreEFtest.Model.Entities.Store", "Store")
                        .WithMany("Staffs")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StoreEFtest.Model.Entities.Stock", b =>
                {
                    b.HasOne("StoreEFtest.Model.Entities.Product", "Product")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreEFtest.Model.Entities.Store", "Store")
                        .WithMany("Stocks")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
